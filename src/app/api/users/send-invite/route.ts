import { NextRequest, NextResponse } from 'next/server'
import { getEmailTransport, emailTemplates } from '@/lib/email'

// Generate a default invite URL if none is provided
function generateInviteUrl(email: string): string {
  const baseUrl = process.env.NEXT_PUBLIC_SERVER_URL || 'http://localhost:3000'
  const token = Buffer.from(`${email}-${Date.now()}`).toString('base64')
  return `${baseUrl}/admin/invite?email=${encodeURIComponent(email)}&token=${token}&expires=${Date.now() + (7 * 24 * 60 * 60 * 1000)}`
}

export async function POST(request: NextRequest) {
  try {
    console.log('üìß Users send-invite endpoint called')
    console.log('üìß Request headers:', Object.fromEntries(request.headers.entries()))
    
    let body
    try {
      body = await request.json()
      console.log('üìß Request body:', body)
    } catch (parseError) {
      console.error('‚ùå Failed to parse request body:', parseError)
      return NextResponse.json(
        {
          error: 'Invalid JSON in request body',
          details: 'Request body must be valid JSON',
        },
        { status: 400 },
      )
    }

    const { email, inviteUrl: providedInviteUrl } = body

    if (!email) {
      console.log('‚ùå Missing email in request')
      return NextResponse.json(
        {
          error: 'Email address is required',
          received: { email, inviteUrl: providedInviteUrl },
        },
        { status: 400 },
      )
    }

    // Generate invite URL if not provided
    const inviteUrl = providedInviteUrl || generateInviteUrl(email)
    console.log(`üìß Using invite URL: ${inviteUrl}`)

    console.log(`üìß Sending admin invite email to: ${email}`)
    console.log(`üìß Invite URL: ${inviteUrl}`)

    // Use shared email transport and templates
    const transport = getEmailTransport()
    const { subject, html, text } = emailTemplates.adminInvite(email, inviteUrl)

    await transport.sendMail({
      from: `"JCL CMS" <${process.env.SMTP_FROM}>`,
      to: email,
      subject,
      html,
      text,
    })

    console.log(`‚úÖ Admin invite email sent successfully to: ${email}`)

    return NextResponse.json({
      success: true,
      message: `Admin invite email sent successfully to ${email}`,
      timestamp: new Date().toISOString(),
    })
  } catch (error: any) {
    console.error('‚ùå Failed to send admin invite email:', {
      error: error.message,
      code: error.code,
      stack: error.stack,
    })

    return NextResponse.json(
      {
        error: 'Failed to send admin invite email',
        details: error.message,
        code: error.code,
      },
      { status: 500 },
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Users send invite endpoint',
    usage: 'POST with { "email": "user@example.com" } (inviteUrl is optional)',
    requiredFields: ['email'],
    optionalFields: ['inviteUrl'],
    example: {
      email: 'user@example.com',
      note: 'inviteUrl will be auto-generated if not provided',
    },
    autoGeneratedUrl: 'If no inviteUrl is provided, one will be generated automatically with format: /admin/invite?email=user@example.com&token=base64token&expires=timestamp'
  })
}
